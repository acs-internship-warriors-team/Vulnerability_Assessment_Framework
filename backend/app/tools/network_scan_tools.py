import json
import socket
import nmap
import requests

def port_scan(host_ip):
    if host_ip is None or host_ip.strip() == "":
        return json.dumps({"success":False, "error": "Host IP is required"})
    
    try:
        open_ports = []
        for port in range(1, 444):
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((host_ip, port))
            if result == 0:
                open_ports.append(port)
            sock.close()
        return json.dumps({"success":True, "result": open_ports})
    except Exception as e:
        return json.dumps({"success":False, "error": str(e)})

def service_version_scan(host_ip):
    if host_ip is None or host_ip.strip() == "":
        return json.dumps({"success":False, "error": "Host IP is required"})
    
    try:
        nm = nmap.PortScanner()
        nm.scan(hosts=host_ip, arguments='-sV -Pn')
        results = []
        for host in nm.all_hosts():
            host_data = {
                "host": host,
                "protocols": []
            }
            for proto in nm[host].all_protocols():
                for port in nm[host][proto].keys():
                    service = nm[host][proto][port]['name']
                    version = nm[host][proto][port]['product'] + " " + nm[host][proto][port]['version']
                    protocol_data = {
                        "protocol": proto,
                        "port": port,
                        "service": service,
                        "version": version
                    }
                    host_data["protocols"].append(protocol_data)
            results.append(host_data)
        return json.dumps({"success":True, "result": results})
    except Exception as e:
        return json.dumps({"success":False, "error": str(e)})

def analyze_http_headers(domain):
    url = f"http://{domain}"
    try:
        response = requests.get(url)
        headers = response.headers
        
        # Convert headers dictionary to a JSON serializable format
        headers_json = {key: value for key, value in headers.items()}

        return json.dumps({"success":True, "result": headers_json})
    except Exception as e:
        return json.dumps({"success":False, "error": str(e)})