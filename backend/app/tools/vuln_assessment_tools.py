import requests
from requests.exceptions import RequestException
from ..config import Config
import subprocess
import json
import datetime
import time
from zapv2 import ZAPv2

def scan_vulnerabilities_with_zap(domain):
    try:
        zap_url = Config.ZAP_URL
        api_key = Config.ZAP_API_KEY
        
        # # Load API key from file
        # with open('/app/api_key.txt', 'r') as f:
        #     api_key = f.read().strip()
        
        # Set this if you have an API key
        zap = ZAPv2(apikey=api_key, proxies={'http': zap_url, 'https': zap_url})

        # Start a new scan
        scan_id = zap.ascan.scan(domain)
        
        # Poll the status until the scan is complete
        while int(zap.ascan.status(scan_id)) < 100:
            time.sleep(5)

        # Retrieve the results
        results = zap.core.alerts(baseurl=domain)
        return json.dumps({"success": True, "result": results}, indent=4)

    except Exception as e:
        error_message = f"Exception: {str(e)}"
        return json.dumps({"success": False, "error": error_message}, indent=4)

def scan_vulnerabilities_with_nikto(domain):
    try:
        # Generate a unique filename using the domain and current time
        timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        filename = f"{domain}_{timestamp}_vulns.txt"
        
        # Run the Nikto scan and output to the unique filename
        result = subprocess.run(['nikto', '-h', domain, '-output', filename], capture_output=True, text=True)
        
        # Read the results from the file
        with open(filename, 'r') as file:
            vulnerabilities = file.readlines()
        
        return json.dumps({"success": True, "result": [vuln.strip() for vuln in vulnerabilities]}, indent=4)
    except Exception as e:
        return json.dumps({"success":False, "error": str(e)}, indent=4)

class NessusAPI:
    def __init__(self, nessus_url, nessus_username, nessus_password):
        self.nessus_url = nessus_url
        self.token = self.get_token(nessus_username, nessus_password)

    def get_token(self, username, password):
        url = f'{self.nessus_url}/session'
        payload = {'username': username, 'password': password}
        response = requests.post(url, json=payload)
        response.raise_for_status()
        return response.json()['token']

    def create_scan(self, name, description, targets):
        url = f'{self.nessus_url}/scans'
        headers = {'X-Cookie': f'token={self.token}', 'Content-Type': 'application/json'}
        payload = {
            "uuid": "your-template-uuid-here",
            "settings": {
                "name": name,
                "description": description,
                "text_targets": targets,
                "scanner_id": "1"
            }
        }
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()['scan']

    def launch_scan(self, scan_id):
        url = f'{self.nessus_url}/scans/{scan_id}/launch'
        headers = {'X-Cookie': f'token={self.token}'}
        response = requests.post(url, headers=headers)
        response.raise_for_status()
        return response.json()['scan_uuid']

    def get_scan_status(self, scan_id):
        url = f'{self.nessus_url}/scans/{scan_id}'
        headers = {'X-Cookie': f'token={self.token}'}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()['info']['status']

    def get_scan_results(self, scan_id):
        url = f'{self.nessus_url}/scans/{scan_id}/export'
        headers = {'X-Cookie': f'token={self.token}'}
        payload = {"format": "json"}
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        file_id = response.json()['file']

        # Download the file
        download_url = f'{self.nessus_url}/scans/{scan_id}/export/{file_id}/download'
        download_response = requests.get(download_url, headers=headers)
        download_response.raise_for_status()
        return download_response.json()

def scan_vulnerabilities_with_nessus(domain):
    try:
        nessus_url = Config.NESSUS_URL
        nessus_username = Config.NESSUS_USERNAME
        nessus_password = Config.NESSUS_PASSWORD

        nessus_api = NessusAPI(nessus_url, nessus_username, nessus_password)

        # Create a scan
        scan = nessus_api.create_scan(name=f"Scan for {domain}", description="Automated scan", targets=domain)
        scan_id = scan['id']

        # Launch the scan
        scan_uuid = nessus_api.launch_scan(scan_id)

        # Poll the scan status
        while True:
            status = nessus_api.get_scan_status(scan_id)
            if status == 'completed':
                break
            time.sleep(10)

        # Retrieve the results
        results = nessus_api.get_scan_results(scan_id)

        return json.dumps({"success": True, "result": results}, indent=4)

    except Exception as e:
        return json.dumps({"success": False, "error": str(e)}, indent=4)
