import React, { useState, useEffect } from "react";
import {
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
} from "@mui/material";

const parseNiktoResponse = (niktoResponse) => {
  const vulnerabilities = [];
  let idCounter = 1;

  niktoResponse.forEach((item, index) => {
    // Skip version and target information
    if (index > 2 && item.startsWith("+")) {
      const [, method, endpoint, description] =
        item.match(/\+ (\w+) (\/.*?): (.+)/) || [];
      vulnerabilities.push({
        id: idCounter++,
        method: method,
        endpoint: endpoint,
        severity: "Medium",
        description,
      });
    }
  });

  return vulnerabilities;
};

const VulnerFoundNikto = ({ data }) => {
  return (
    <div>
      <Typography variant="h5" gutterBottom>
        Vulnerabilities Found
      </Typography>
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell sx={{ fontWeight: "bold", fontSize: "1rem" }}>
                ID
              </TableCell>
              <TableCell sx={{ fontWeight: "bold", fontSize: "1rem" }}>
                Method
              </TableCell>
              <TableCell sx={{ fontWeight: "bold", fontSize: "1rem" }}>
                Endpoint
              </TableCell>
              <TableCell sx={{ fontWeight: "bold", fontSize: "1rem" }}>
                Severity
              </TableCell>
              <TableCell sx={{ fontWeight: "bold", fontSize: "1rem" }}>
                Description
              </TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {data.vulnerabilities_with_nikto.success &&
            data.vulnerabilities_with_nikto.result
              ? parseNiktoResponse(data.vulnerabilities_with_nikto.result).map(
                  (vulnerability) => (
                    <TableRow key={vulnerability.id}>
                      <TableCell>{vulnerability.id}</TableCell>
                      <TableCell>{vulnerability.method}</TableCell>
                      <TableCell>{vulnerability.endpoint}</TableCell>
                      <TableCell>{vulnerability.severity}</TableCell>
                      <TableCell>{vulnerability.description}</TableCell>
                    </TableRow>
                  )
                )
              : null}
          </TableBody>
        </Table>
      </TableContainer>
    </div>
  );
};

export default VulnerFoundNikto;
