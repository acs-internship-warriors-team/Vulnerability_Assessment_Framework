import React from "react";
import { Grid, Paper, Typography, Box } from "@mui/material";

const countSeverities = (niktoResponse) => {
  const severityCounts = {
    High: 0,
    Medium: 0,
    Low: 0,
    Critical: 0,
    Information: 0,
  };

  const getSeverity = (description) => {
    if (description.includes("X-Frame-Options header is not present")) {
      return "High";
    } else if (
      description.includes("X-Content-Type-Options header is not set")
    ) {
      return "High";
    } else if (description.includes("Uncommon header")) {
      return "Medium";
    } else if (
      description.includes("Retrieved access-control-allow-origin header")
    ) {
      return "Medium";
    } else {
      return "Information";
    }
  };

  niktoResponse.forEach((item, index) => {
    // Skip version and target information
    if (index > 2 && item.startsWith("+")) {
      const match = item.match(/\+ (\w+) (\/.*?): (.+)/);
      if (match) {
        const [, , , description] = match;
        const severity = getSeverity(description);
        severityCounts[severity]++;
      }
    }
  });

  return severityCounts;
};

const DomainInfo = ({ data }) => {
  const boxStyles = {
    padding: "20px",
    textAlign: "center",
    color: "white",
  };

  const renderBox = (label, value, bgColor) => (
    <Grid item xs={12} sm={6} md={4}>
      <Paper sx={{ ...boxStyles, backgroundColor: bgColor }}>
        <Typography variant="h5">{label}</Typography>
        <Typography variant="h3">{value}</Typography>
      </Paper>
    </Grid>
  );

  const getSeverityColor = (severity) => {
    switch (severity) {
      case "Low":
        return "#4caf50"; // Green
      case "Medium":
        return "#ff9800"; // Orange
      case "High":
        return "#f44336"; // Red
      case "Critical":
        return "#d32f2f"; // Dark Red
      default:
        return "#2196f3"; // Blue
    }
  };

  const renderSeverityBanner = (severities) => (
    <Grid item xs={12}>
      {Object.keys(severities).map((severity) => (
        <Box
          sx={{
            padding: "8px",
            textAlign: "center",
            backgroundColor: getSeverityColor(severity),
            color: "white",
            marginBottom: "8px",
          }}
        >
          <Typography variant="h4">{severity}</Typography>
          <Typography variant="h6">Count: {severities[severity]}</Typography>
        </Box>
      ))}
    </Grid>
  );

  return data ? (
    <Grid container spacing={3}>
      {data.vulnerabilities_with_nikto.success &&
      data.vulnerabilities_with_nikto.result
        ? renderSeverityBanner(
            countSeverities(data.vulnerabilities_with_nikto.result)
          )
        : renderSeverityBanner({
            High: 0,
            Medium: 0,
            Low: 0,
            Critical: 0,
            Information: 0,
          })}
      {renderBox(
        "Number of Subdomains",
        data.subdomains.success && data.subdomains.result
          ? data.subdomains.result.length
          : 0,
        "primary.main"
      )}
      {renderBox(
        "Number of IPs",
        data.domain_ip_addresses.success && data.domain_ip_addresses.result
          ? data.domain_ip_addresses.result.length
          : 0,
        "secondary.main"
      )}
      {renderBox(
        "Number of Virtual Hosts",
        data.virtual_hosts.success && data.virtual_hosts.result
          ? data.virtual_hosts.result.length
          : 0,
        "error.main"
      )}
      {renderBox(
        "API Token Leaks",
        data.api_tokens.success && data.api_tokens.result
          ? data.api_tokens.result.length
          : 0,
        "warning.main"
      )}
      {renderBox("Vulnerabilities Found", 6, "success.main")}
      {renderBox(
        "Number of Open Ports",
        data.port_scan.success && data.port_scan.result
          ? data.port_scan.result.length
          : 0,
        "info.main"
      )}
    </Grid>
  ) : (
    <Typography variant="body1">Loading data...</Typography>
  );
};

export default DomainInfo;
