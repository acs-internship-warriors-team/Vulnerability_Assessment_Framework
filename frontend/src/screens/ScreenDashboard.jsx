import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import DomainInfo from "../components/DomainInfo";
import Subdomain from "../components/Subdomain";
import VirtualHostAPI from "../components/VirtualHost";
import JSFile from "../components/JSFile";
import APIKeyLeak from "../components/Apikey";
import VulnerFoundNikto from "../components/VulnerFoundNikto";
import {
  AppBar,
  Box,
  CircularProgress,
  Divider,
  Drawer,
  IconButton,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Toolbar,
  Typography,
} from "@mui/material";
import MenuIcon from "@mui/icons-material/Menu";
import DashboardIcon from "@mui/icons-material/Dashboard";
import AssessmentIcon from "@mui/icons-material/Assessment";
import SecurityIcon from "@mui/icons-material/Security";
import VpnKeyIcon from "@mui/icons-material/VpnKey";
import CodeIcon from "@mui/icons-material/Code";
import BugReportIcon from "@mui/icons-material/BugReport";
import { useParams } from "react-router-dom";
import OpenPort from "../components/OpenPorts";
import VulnerFoundNessus from "../components/VulnerFoundNessus";
import VulnerFoundZap from "../components/VulnerFoundZap";
import { scanDomain } from "../services/api";
import { KRoutes } from "../routers/router";
import { toast } from "react-toastify";

const drawerWidth = 240;

const ScreenDashbaord = () => {
  const { domain } = useParams();

  const navigate = useNavigate();
  const [mobileOpen, setMobileOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [domainScanResp, setDomainScanResp] = useState();
  const [selectedItem, setSelectedItem] = useState("Dashboard");

  useEffect(() => {
    const fetchData = async () => {
      try {
        const domainPattern =
          /^(?!:\/\/)([a-zA-Z0-9-_]{1,63}\.)+[a-zA-Z]{2,6}$/;

        if (!domain || !domainPattern.test(domain)) {
          toast.error("Please enter a valid domain name.");
          return;
        }

        const scanDomainResp = await scanDomain(domain);
        setDomainScanResp(scanDomainResp);

        toast.success("Scanned successfully");
        setIsLoading(false);
      } catch (error) {
        toast.error(error.message || "Failed to scan domain");
        navigate(KRoutes.root);
      }
    };

    fetchData();
  }, []);

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  const handleMenuItemClick = (text) => {
    setSelectedItem(text);
  };

  const drawerItems = [
    {
      text: "Dashboard",
      icon: <DashboardIcon />,
      color: "#7b1fa2",
      fontWeight: "bold",
    },
    {
      text: "Subdomain",
      icon: <AssessmentIcon />,
      color: "#7b1fa2",
      fontWeight: "bold",
    },
    {
      text: "Virtual Host",
      icon: <SecurityIcon />,
      color: "#7b1fa2",
      fontWeight: "bold",
    },
    {
      text: "API Key Leak",
      icon: <VpnKeyIcon />,
      color: "#7b1fa2",
      fontWeight: "bold",
    },
    {
      text: "Open Ports",
      icon: <CodeIcon />,
      color: "#7b1fa2",
      fontWeight: "bold",
    },
    {
      text: "Nikto Vulns",
      icon: <BugReportIcon />,
      color: "#7b1fa2",
      fontWeight: "bold",
    },
    {
      text: "Nessus Vulns",
      icon: <BugReportIcon />,
      color: "#7b1fa2",
      fontWeight: "bold",
    },
    {
      text: "Zap Vulns",
      icon: <BugReportIcon />,
      color: "#7b1fa2",
      fontWeight: "bold",
    },
  ];

  const drawer = (
    <div>
      <Toolbar />
      <Divider />
      <List>
        {drawerItems.map((item) => (
          <ListItem
            button
            key={item.text}
            onClick={() => handleMenuItemClick(item.text)}
            selected={selectedItem === item.text}
            sx={{
              "&.Mui-selected": { backgroundColor: "#f0f0f0" }, // Selected item background color
              "&:hover": { backgroundColor: "#f5f5f5" }, // Hover background color
              color: selectedItem === item.text ? "#1976d2" : "inherit", // Selected item text color
            }}
          >
            <ListItemIcon sx={{ color: item.color }}>{item.icon}</ListItemIcon>
            <ListItemText
              primary={item.text}
              primaryTypographyProps={{
                variant: "body1",
                fontWeight: item.fontWeight,
                color: "inherit",
              }}
            />
          </ListItem>
        ))}
      </List>
    </div>
  );

  const renderContent = (data) => {
    switch (selectedItem) {
      case "Dashboard":
        return <DomainInfo data={data} />;
      case "Subdomain":
        return <Subdomain data={data} />;
      case "Virtual Host":
        return <VirtualHostAPI data={data} />;
      case "API Key Leak":
        return <APIKeyLeak data={data} domain={domain} />;
      case "Open Ports":
        return <OpenPort data={data} />;
      case "Nikto Vulns":
        return <VulnerFoundNikto data={data} />;
      case "Nessus Vulns":
        return <VulnerFoundNessus data={data} />;
      case "Zap Vulns":
        return <VulnerFoundZap data={data} />;
      default:
        return <Typography variant="body1">Welcome back</Typography>;
    }
  };

  return isLoading ? (
    <Box
      sx={{
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        height: "100vh",
      }}
    >
      <CircularProgress size={80} thickness={4} sx={{ mb: 2 }} />
      <Typography variant="h6" align="center">
        Please wait while the scanner completes the scan on domain {domain}
      </Typography>
    </Box>
  ) : (
    <Box sx={{ display: "flex" }}>
      <AppBar
        position="fixed"
        sx={{
          zIndex: (theme) => theme.zIndex.drawer + 1,
          backgroundColor: "#1976d2", // App bar background color
        }}
      >
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={handleDrawerToggle}
            sx={{ mr: 2, display: { sm: "none" } }}
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
            Vulnerability Assessment Framework
          </Typography>
        </Toolbar>
      </AppBar>
      <Box
        component="nav"
        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}
        aria-label="mailbox folders"
      >
        <Drawer
          variant="temporary"
          open={mobileOpen}
          onClose={handleDrawerToggle}
          ModalProps={{ keepMounted: true }}
          sx={{
            display: { xs: "block", sm: "none" },
            "& .MuiDrawer-paper": {
              boxSizing: "border-box",
              width: drawerWidth,
            },
          }}
        >
          {drawer}
        </Drawer>
        <Drawer
          variant="permanent"
          sx={{
            display: { xs: "none", sm: "block" },
            "& .MuiDrawer-paper": {
              boxSizing: "border-box",
              width: drawerWidth,
            },
          }}
          open
        >
          {drawer}
        </Drawer>
      </Box>
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 3,
          width: { sm: `calc(100% - ${drawerWidth}px)` },
          backgroundColor: "#f4f6f8",
          minHeight: "100vh",
        }}
      >
        <Toolbar />
        {renderContent(domainScanResp)}
      </Box>
    </Box>
  );
};

export default ScreenDashbaord;
